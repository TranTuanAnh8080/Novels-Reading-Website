import React, { useState } from "react";
import { Info, AlertTriangle, ArrowLeft, Loader2 } from "lucide-react";
import { motion } from "framer-motion";
import { Link } from "react-router-dom";
import axios from 'axios';

const MainItem = () => {
    const packages = [
        {
            id: 1,
            coins: "10.000 xu",
            price: 10000,
            icon: "üåü",
            description: "Ph√π h·ª£p cho ng∆∞·ªùi m·ªõi b·∫Øt ƒë·∫ßu, ƒë·ªçc th·ª≠ m·ªôt s·ªë truy·ªán v√† tr·∫£i nghi·ªám c∆° b·∫£n.",
            perks: [
                "Truy c·∫≠p truy·ªán c∆° b·∫£n",
                "Tr·∫£i nghi·ªám th·ª≠ h·ªá th·ªëng",
                "Kh√¥ng lo l·∫Øng r·ªßi ro l·ªõn"
            ]
        },
        {
            id: 2,
            coins: "25.000 xu",
            price: 25000,
            icon: "üí∞",
            description: "G√≥i ph·ªï th√¥ng, ƒë·ªß ƒë·ªÉ ƒë·ªçc nhi·ªÅu ch∆∞∆°ng truy·ªán v√† theo d√µi nhi·ªÅu t√°c ph·∫©m y√™u th√≠ch.",
            perks: [
                "Nhi·ªÅu ch∆∞∆°ng truy·ªán m·ªü kh√≥a h∆°n",
                "Th√≠ch h·ª£p cho ng∆∞·ªùi ƒë·ªçc th∆∞·ªùng xuy√™n",
                "H·ªó tr·ª£ t√°c gi·∫£ nhi·ªÅu h∆°n"
            ]
        },
        {
            id: 3,
            coins: "60.000 xu",
            price: 55000,
            icon: "üéâ",
            description: "G√≥i ti·∫øt ki·ªám v·ªõi ∆∞u ƒë√£i ƒë·∫∑c bi·ªát, d√†nh cho ng∆∞·ªùi ƒë·ªçc trung th√†nh.",
            perks: [
                "Ti·∫øt ki·ªám 20% chi ph√≠",
                "Tr·∫£i nghi·ªám li·ªÅn m·∫°ch kh√¥ng lo h·∫øt xu",
                "Khuy·∫øn ngh·ªã cho ƒë·ªôc gi·∫£ g·∫Øn b√≥"
            ]
        },
        {
            id: 4,
            coins: "120.000 xu",
            price: 100000,
            icon: "üíé",
            description: "G√≥i cao c·∫•p, ƒë√°p ·ª©ng nhu c·∫ßu ƒë·ªçc l√¢u d√†i v·ªõi m·ª©c gi√° h·ª£p l√Ω.",
            perks: [
                "Nhi·ªÅu ∆∞u ƒë√£i d√†i h·∫°n",
                "Th·ªèa s·ª©c ƒë·ªçc truy·ªán kh√¥ng gi·ªõi h·∫°n",
                "H·ªó tr·ª£ n·ªÅn t·∫£ng v√† t√°c gi·∫£ nhi·ªÅu h∆°n"
            ]
        },
        {
            id: 5,
            coins: "250.000",
            price: 200000,
            icon: "üî•",
            description: "L·ª±a ch·ªçn t·ªëi ∆∞u nh·∫•t ‚Äì nhi·ªÅu xu, nhi·ªÅu ∆∞u ƒë√£i v√† ti·∫øt ki·ªám l·ªõn.",
            perks: [
                "Best choice cho ƒë·ªôc gi·∫£ VIP",
                "Ti·∫øt ki·ªám v∆∞·ª£t tr·ªôi",
                "ƒê·ªçc truy·ªán tho·∫£i m√°i trong th·ªùi gian d√†i"
            ]
        },
    ];

    const [selected, setSelected] = useState(null);
    const [showDetail, setShowDetail] = useState(null);
    const [isLoading, setIsLoading] = useState(false);
    const [errorMessage, setErrorMessage] = useState('');

    const handleSelect = (pkg) => {
        setSelected(pkg.id);
        setErrorMessage('');
    };

    // X·ª≠ l√Ω t·∫°o link thanh to√°n PayOS
    const handlePaymentRequest = async () => {
        if (!selected) {
            setErrorMessage('Vui l√≤ng ch·ªçn g√≥i n·∫°p xu');
            return;
        }

        setIsLoading(true);
        setErrorMessage('');

        try {
            // L·∫•y token t·ª´ sessionStorage
            const token = sessionStorage.getItem('token');

            if (!token) {
                setErrorMessage('Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.');
                setTimeout(() => {
                    window.location.href = "/LoginPage";
                }, 2000);
                return;
            }

            // Decode token ƒë·ªÉ l·∫•y accountId
            const payload = JSON.parse(atob(token.split('.')[1]));
            const userId = payload.accountId;

            // T√¨m g√≥i ƒë∆∞·ª£c ch·ªçn
            const chosenPackage = packages.find((p) => p.id === selected);

            if (!chosenPackage) {
                setErrorMessage('G√≥i ƒë√£ ch·ªçn kh√¥ng h·ª£p l·ªá');
                return;
            }

            console.log('üöÄ ƒêang t·∫°o link thanh to√°n cho:', chosenPackage);

            // G·ªçi API t·∫°o link thanh to√°n
            const response = await axios.post(
                'https://be-ink-realm-c7jk.vercel.app/payment/create-payment-link',
                {
                    amount: chosenPackage.price,
                    description: `uid${userId} Nap ${chosenPackage.price}`,
                    returnUrl: window.location.origin + '/Profile',
                    cancelUrl: window.location.origin + '/MainItem'
                },
                {
                    headers: {
                        'accept': '*/*',
                        'Content-Type': 'application/json'
                    },
                    timeout: 15000
                }
            );

            // Ki·ªÉm tra response
            if (response.data.success && response.data.checkoutUrl) {
                console.log('‚úÖ T·∫°o link thanh to√°n th√†nh c√¥ng:', response.data);

                // L∆∞u th√¥ng tin thanh to√°n v√†o sessionStorage
                const paymentInfo = {
                    orderCode: response.data.orderCode,
                    amount: response.data.data.amount,
                    description: response.data.data.description,
                    packageId: chosenPackage.id,
                    packageName: chosenPackage.coins,
                    checkoutUrl: response.data.checkoutUrl,
                    timestamp: Date.now()
                };
                sessionStorage.setItem('pendingPayment', JSON.stringify(paymentInfo));

                // Chuy·ªÉn h∆∞·ªõng tr·ª±c ti·∫øp ƒë·∫øn trang checkout PayOS
                window.location.href = response.data.checkoutUrl;

            } else {
                setErrorMessage(response.data.message || 'Kh√¥ng th·ªÉ t·∫°o link thanh to√°n');
            }

        } catch (error) {
            console.error('‚ùå L·ªói t·∫°o thanh to√°n:', error);

            let errorMsg = '';

            if (error.response) {
                const status = error.response.status;
                const errorData = error.response.data;

                switch (status) {
                    case 400:
                        errorMsg = errorData?.message || '‚ùå Th√¥ng tin thanh to√°n kh√¥ng h·ª£p l·ªá';
                        break;
                    case 401:
                    case 403:
                        errorMsg = '‚ùå Phi√™n ƒëƒÉng nh·∫≠p h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.';
                        setTimeout(() => {
                            sessionStorage.removeItem('token');
                            window.location.href = "/LoginPage";
                        }, 2000);
                        break;
                    case 404:
                        errorMsg = '‚ùå Kh√¥ng t√¨m th·∫•y d·ªãch v·ª• thanh to√°n';
                        break;
                    case 500:
                        errorMsg = 'üí• L·ªói server! Vui l√≤ng th·ª≠ l·∫°i sau';
                        break;
                    default:
                        errorMsg = errorData?.message || `‚ùå L·ªói ${status}: Kh√¥ng th·ªÉ t·∫°o thanh to√°n`;
                }
            } else if (error.request) {
                errorMsg = '‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server. Vui l√≤ng ki·ªÉm tra m·∫°ng';
            } else if (error.code === 'ECONNABORTED') {
                errorMsg = '‚è±Ô∏è Qu√° th·ªùi gian ch·ªù. Vui l√≤ng th·ª≠ l·∫°i';
            } else {
                errorMsg = '‚ö†Ô∏è C√≥ l·ªói x·∫£y ra: ' + error.message;
            }

            setErrorMessage(errorMsg);

        } finally {
            setIsLoading(false);
        }
    };

    return (
        <div>
            {/* N·ªôi dung ch√≠nh */}
            <main className="flex-grow py-12 px-4">
                {/* N√∫t Tr·ªü l·∫°i */}
                <div className="max-w-7xl mx-auto w-full px-6 py-4">
                    <Link to="/UploadPage" className="flex items-center gap-2 text-sky-700 font-bold">
                        <ArrowLeft size={18} /> Tr·ªü l·∫°i
                    </Link>
                </div>

                <div className="max-w-4xl mx-auto">
                    {/* Ti√™u ƒë·ªÅ */}
                    <div className="text-center mb-10">
                        <h1 className="text-3xl font-bold text-sky-800 mb-2">
                            N·∫°p Xu B·∫±ng H√¨nh Th·ª©c Chuy·ªÉn Kho·∫£n
                        </h1>
                        <p className="text-gray-600">
                            B·∫°n h√£y ch·ªçn g√≥i n·∫°p xu ph√π h·ª£p ƒë·ªÉ m·ªü ra nhi·ªÅu ti·ªán √≠ch v√† tr·∫£i nghi·ªám t·ªët h∆°n nh√© üåü
                        </p>
                    </div>

                    {/* Th√¥ng b√°o */}
                    <div className="bg-gradient-to-r bg-violet-100 via-rose-50 to-yellow-100 border border-sky-200 text-sky-800 rounded-xl px-4 py-3 flex items-start gap-2 mb-10 shadow-sm">
                        <Info className="w-5 h-5 text-sky-800 mt-0.5" />
                        <p className="text-center w-full text-sky-800 font-normal">
                            Thanh to√°n qua c·ªïng <strong className="italic text-lg ">PayOS</strong> an to√†n, nhanh ch√≥ng. <br />
                            Xu s·∫Ω ƒë∆∞·ª£c c·ªông t·ª± ƒë·ªông trong <b>1-5 ph√∫t</b> sau khi thanh to√°n th√†nh c√¥ng.
                        </p>
                    </div>

                    {/* Hi·ªÉn th·ªã l·ªói n·∫øu c√≥ */}
                    {errorMessage && (
                        <div className="bg-red-50 border border-red-200 rounded-xl px-4 py-3 flex items-start gap-2 mb-6">
                            <AlertTriangle className="w-5 h-5 text-red-500 mt-0.5" />
                            <p className="text-red-700 text-sm">{errorMessage}</p>
                        </div>
                    )}

                    {/* G√≥i n·∫°p xu */}
                    <div className="space-y-10 mb-12">
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-8 max-w-3xl mx-auto cursor-pointer">
                            {packages.map((pkg, idx) => (
                                <motion.div
                                    key={pkg.id}
                                    className={`relative rounded-4xl p-8 text-center transition-all ${idx === 4 ? "md:col-span-2" : ""
                                        } ${selected === pkg.id
                                            ? "bg-gradient-to-r from-violet-100 via-rose-100 to-yellow-100 shadow-xl"
                                            : "bg-white border border-gray-200 shadow-md hover:shadow-xl hover:-translate-y-1"
                                        }`}
                                    whileHover={{ scale: 1.04 }}
                                    whileTap={{ scale: 0.96 }}
                                >
                                    {/* Badges */}
                                    {pkg.id === 1 && (
                                        <span className="absolute top-3 right-3 bg-yellow-400 text-white text-xs px-3 py-1 rounded-full shadow-md">
                                            üíï G√≥i ph·ªï th√¥ng
                                        </span>
                                    )}
                                    {pkg.id === 2 && (
                                        <span className="absolute top-3 right-3 bg-yellow-400 text-white text-xs px-3 py-1 rounded-full shadow-md">
                                            üíï G√≥i ph·ªï th√¥ng
                                        </span>
                                    )}
                                    {pkg.id === 3 && (
                                        <span className="absolute top-3 right-3 bg-rose-500 text-white text-xs px-3 py-1 rounded-full shadow-md">
                                            üî• Ti·ªán √≠ch
                                        </span>
                                    )}
                                    {pkg.id === 4 && (
                                        <span className="absolute top-3 right-3 bg-pink-500 text-white text-xs px-3 py-1 rounded-full shadow-md">
                                            üî• Ti·∫øt ki·ªám 20%
                                        </span>
                                    )}
                                    {pkg.id === 5 && (
                                        <span className="absolute top-3 right-3 bg-green-500 text-white text-xs px-3 py-1 rounded-full shadow-md">
                                            üíé L·ª±a ch·ªçn h√†ng ƒë·∫ßu
                                        </span>
                                    )}

                                    <div className="text-5xl mb-4">{pkg.icon}</div>
                                    <h3 className="text-2xl font-bold text-gray-800">{pkg.coins}</h3>
                                    <p className="text-gray-600">
                                        {pkg.price.toLocaleString("vi-VN")}ƒë
                                    </p>

                                    {/* Button ch·ªçn g√≥i */}
                                    <button
                                        className={`mt-6 w-full py-3 rounded-xl font-bold shadow-md transition-all ${selected === pkg.id
                                            ? "bg-sky-600 text-white hover:bg-sky-700"
                                            : "bg-gradient-to-r from-sky-400 to-indigo-400 text-white hover:brightness-110"
                                            }`}
                                        onClick={() => handleSelect(pkg)}
                                        disabled={isLoading}
                                    >
                                        {selected === pkg.id ? "‚úÖ ƒê√£ ch·ªçn" : "‚ö° Ch·ªçn g√≥i üíµ"}
                                    </button>

                                    {/* Xem chi ti·∫øt */}
                                    <button
                                        className="mt-3 text-md font-medium text-sky-600 cursor-pointer"
                                        onClick={() => setShowDetail(pkg)}
                                    >
                                        Xem chi ti·∫øt
                                    </button>
                                </motion.div>
                            ))}
                        </div>
                    </div>

                    {/* Button x√°c nh·∫≠n thanh to√°n */}
                    <div className="text-center mt-6 mb-6">
                        <button
                            disabled={!selected || isLoading}
                            className={`px-8 py-4 rounded-full font-bold text-lg shadow-lg transition-all flex items-center justify-center gap-2 mx-auto ${selected && !isLoading
                                ? "bg-gradient-to-r bg-violet-100 via-rose-200 to-yellow-200 text-gray-700 hover:brightness-105 hover:scale-105"
                                : "bg-gray-300 text-gray-500 cursor-not-allowed"
                                }`}
                            onClick={handlePaymentRequest}
                        >
                            {isLoading ? (
                                <>
                                    <Loader2 className="w-5 h-5 animate-spin" />
                                    <span>ƒêang x·ª≠ l√Ω...</span>
                                </>
                            ) : (
                                <>
                                    {selected ? "üèß Thanh to√°n ngay" : "Ch·ªçn g√≥i ƒë·ªÉ ti·∫øp t·ª•c"}
                                </>
                            )}
                        </button>
                    </div>

                    {/* L∆∞u √Ω */}
                    <div className="bg-amber-50 border border-amber-200 rounded-3xl px-4 py-5 flex items-start gap-3 shadow-sm mt-10">
                        <AlertTriangle className="w-6 h-6 text-amber-500 mt-0.5" />
                        <div className="text-sm text-amber-800 space-y-1">
                            <p><b>L∆∞u √Ω quan tr·ªçng</b></p>
                            <ul className="list-disc list-inside space-y-1">
                                <li>M·ªói chuy·ªÉn kho·∫£n ch·ªâ d√πng 1 l·∫ßn, xu s·∫Ω kh√¥ng ƒë∆∞·ª£c c·ªông t·ª± ƒë·ªông n·∫øu sai n·ªôi dung.</li>
                                <li>Vui l√≤ng chuy·ªÉn kho·∫£n ƒë√∫ng s·ªë ti·ªÅn theo g√≥i ƒë√£ ch·ªçn ƒë·ªÉ tr√°nh l·ªói h·ªá th·ªëng.</li>
                                <li>Th·ªùi gian x·ª≠ l√Ω: <b>1-5 ph√∫t</b> sau khi chuy·ªÉn kho·∫£n th√†nh c√¥ng.</li>
                                <li>Li√™n h·ªá h·ªó tr·ª£ n·∫øu g·∫∑p s·ª± c·ªë qua email: <b>support@inkrealm.com</b> ho·∫∑c hotline: <b>0901777888</b>.</li>
                                <li>H·ªá th·ªëng ch·ªâ h·ªó tr·ª£ c√°c <b>ng√¢n h√†ng n·ªôi ƒë·ªãa</b> . Vui l√≤ng ki·ªÉm tra danh s√°ch ng√¢n h√†ng ƒë∆∞·ª£c h·ªó tr·ª£ tr∆∞·ªõc khi th·ª±c hi·ªán giao d·ªãch.</li>
                                <li>ƒê·∫£m b·∫£o nh·∫≠p ƒë√∫ng n·ªôi dung chuy·ªÉn kho·∫£n theo h∆∞·ªõng d·∫´n ƒë·ªÉ h·ªá th·ªëng t·ª± ƒë·ªông c·ªông xu.</li>
                                <li> <b>Giao d·ªãch ngo√†i gi·ªù h√†nh ch√≠nh</b> c√≥ th·ªÉ m·∫•t th√™m th·ªùi gian x·ª≠ l√Ω.</li>
                            </ul>
                        </div>
                    </div>
                </div>
            </main>

            {/* Modal chi ti·∫øt */}
            {showDetail && (
                <div className="fixed inset-0 bg-black/50 backdrop-blur-md flex items-center justify-center z-50">
                    <div className="bg-white/95 rounded-3xl shadow-2xl max-w-md w-full p-8 relative animate-scaleIn">
                        <button
                            className="absolute top-4 right-4 text-gray-400 hover:text-gray-700 transition"
                            onClick={() => setShowDetail(null)}
                        >
                            ‚úñ
                        </button>

                        <div className="flex justify-center mb-6">
                            <div className="w-16 h-16 flex items-center justify-center rounded-full bg-gradient-to-r from-yellow-400 to-orange-400 shadow-lg text-3xl">
                                {showDetail.icon}
                            </div>
                        </div>

                        <h2 className="text-3xl font-extrabold text-center text-gray-800 mb-2">
                            {showDetail.coins}
                        </h2>
                        <p className="text-center text-lg text-blue-600 font-bold mb-4">
                            {showDetail.price.toLocaleString("vi-VN") + "ƒë"}
                        </p>
                        <p className="text-center text-gray-600 mb-6 leading-relaxed">
                            {showDetail.description}
                        </p>

                        <ul className="space-y-3 text-gray-700 mb-8">
                            {showDetail.perks.map((perk, idx) => (
                                <li key={idx} className="flex items-center space-x-2">
                                    <span className="text-green-500">‚úî</span>
                                    <span>{perk}</span>
                                </li>
                            ))}
                        </ul>

                        <button
                            className="w-full py-4 rounded-3xl font-medium shadow-lg bg-gradient-to-r from-indigo-400 to-blue-400 text-white hover:scale-[1.02] transition-transform"
                            onClick={() => {
                                setSelected(showDetail.id);
                                setShowDetail(null);
                            }}
                        >
                            üöÄ Ch·ªçn g√≥i n√†y
                        </button>
                    </div>
                </div>
            )}
        </div>
    );
};

export default MainItem;